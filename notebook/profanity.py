# -*- coding: utf-8 -*-
"""Profanity

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YDI5LDRfI1zJ4FrLE7CaTqHl4agX4yQB
"""

from google.colab import drive
drive.mount('/content/gdrive')

!pip install pydub

from pydub.utils import mediainfo

!pip install git+https://github.com/m-bain/whisperx.git --upgrade
from IPython import display
display.clear_output()

import os
def convertvideo2audio(input_video):
    sr = 16000
    audio_path = "output.wav"
    query = f'ffmpeg -i "{input_video}" -ac 1 -acodec pcm_s16le -ar {sr} "{audio_path}" -y'
    os.system(query)
    return audio_path

def check_file_type(file_path):
    file_extension = file_path.split('.')[-1].lower()
    if file_extension == 'mp4' or file_extension == 'mkv':
        return 'video'
    else:
        return 'audio'

from moviepy.editor import *
import moviepy.editor as mp
import whisperx
from difflib import SequenceMatcher

device = "cuda"
compute_type = "float16"
whisper_model = whisperx.load_model("large-v2", device, compute_type=compute_type)

def addBeep(file_path, beep_path, profane_words, video_name, file_type):
    beep = AudioFileClip(beep_path)
    fadein_duration = 0.5  # in seconds
    fadeout_duration = 0.5  # in seconds
    if file_type == "video":
        video = VideoFileClip(file_path)
        original_audio = video.audio
        for key, value in profane_words.items():
            start_time = value[0]
            end_time = value[1]
            beep_duration = end_time - start_time
            # Cut the beep sound to the desired duration
            beep = beep.subclip(0, beep_duration)
            # Set the beep sound to start at the desired timestamp
            beep = beep.set_start(start_time)
            # Apply fade-in and fade-out to the beep sound
            beep = beep.audio_fadein(fadein_duration).audio_fadeout(fadeout_duration)
            # Set the beep sound at the specified timestamp in the original audio
            original_audio = concatenate_audioclips([original_audio.subclip(0, start_time),
                                                      beep,
                                                      original_audio.subclip(end_time)])
        output_audio_path = video_name + ".wav"
        # Save the audio file to the specified output path
        original_audio.write_audiofile(output_audio_path, codec='pcm_s16le')
        video_with_beep = video.set_audio(original_audio)
        # Specify the output file path
        output_path = video_name + ".mp4"
        # Save the video with the modified audio
        video_with_beep.write_videofile(output_path, codec="libx264")
        return output_path
    else:
        original_audio = AudioFileClip(file_path)
        for key, value in profane_words.items():
            start_time = value[0]
            end_time = value[1]
            beep_duration = end_time - start_time
            # Cut the beep sound to the desired duration
            beep = beep.subclip(0, beep_duration)
            # Set the beep sound to start at the desired timestamp
            beep = beep.set_start(start_time)
            # Apply fade-in and fade-out to the beep sound
            beep = beep.audio_fadein(fadein_duration).audio_fadeout(fadeout_duration)
            # Set the beep sound at the specified timestamp in the original audio
            original_audio = concatenate_audioclips([original_audio.subclip(0, start_time),
                                                      beep,
                                                      original_audio.subclip(end_time)])
        # Specify the output file path
        output_audio_path = video_name + ".mp3"
        # Save the audio file to the specified output path
        original_audio.write_audiofile(output_audio_path, codec='pcm_s16le')
        return output_audio_path

def get_profanity(input_video):
    profanity_words = ['Shit', 'shit,', 'Mother-fucker', 'fuck,', 'fucking,', 'pissings', 'bitcheries', 'Slut', 'sluts',
      'Sh*thead', 's**rew', 'B**bs', 'Hell', 'D*ick', 'c*t', 'cunts', 'Holy Shits', 'fuck Jesus',
      'Niggers', 'F***', 'god damns', 'Holy cow', 'goddamns', 'whores', 'pissing', 'Screwed', 'fucks',
      'bitching', 'goddamned', 'Holy Sh*t', 'shitbag', 'Cock suckers', 'c**t', 'whoredoms',
      'Holy balls', 'sucker', 'shitheads', 'Bullshit', 'f-words', 'Cunt', 'Shithead', 'Cocksuckers',
      't*its', 'god damms', 'suckers', 'asses', 'Crappy', 'P*ssy', 'p*ssy', 'fag', 'Holy crap', 'tits',
      'Tits', 'F*ck', 'bull shit', 'shit head', 'damned', 'Sucks', 'f*ck Jesus', 'Fuckface', 'Nigga',
      'HolyShit', 'D*ickhead', 'bastardizing', 'sucked', 'whored', 'B-tch', 'Fuck!', 'Bitch',
      'sucking',
      'twats', 'f-ck', 'motherfuckers', 'bullshitting',
      'pissers', 'boobs', 'Bull-Shit', 'Titties', 'B*tch', 'Mother fucking', 'bastardisations', 'pisser',
      'Whore', 'balls', 'fucking Christ', 'goddamm', 'sh*t', 'b**bs', 'Cock sucker', 'whoredom',
      'a**hole', 'bastardly', 'f-word', 'bastardize', 'Asshole',
      'HolyShits', 'Bullsh*t', 'For Satan Sake', 'bastardizes', 'Damn', 'Holy Shit', 'goddamms',
      'Butt Hole', 'Hail-Satan', 'a**', 'bastardization', 'f*cking', 'F**k', 'Ass-hole', 'shitting', 'Booby', 'twat', "fuckin'",
      'fucking Jesus', 'Bitches', 'Bull shits', 'Damm-its', 'dickheads', 'bastardisation', 'Goddamnit', 'fucked', 'ass holes', 'Twat', 'boobed',
      'MotherF**ker', 'p**sy', 'C*nt', 'f**ck', 'fuck', 'Fuckery', 'god damm', 'boobies', 'Mother fuckers', 'cock', 'clusterfuck',
      'shits', 'MotherF*cker', 'Dammits', 'dong', 'bitchinesses', 'c*ck', 'Dicks', 'Faggot', 'fuckup', 'fucking', 'Mother fucker',
      'f*cking Christ', 'kickass', 'boobing', 'boobie', 'Ass', 'God damn it', 'mother fuckers', 'bo**bs',
      'Damn It', 'whoring', 'Dick', 'Ballsy', 'Cock-sucker', 'jackass', 'Slutty', 'Piss', 'Bastard',
      'assholes', 'shitters', 'fucking Lord', 'Cocksucker', 'Arsehole', 'fuckin', 'badass', 'faggots',
      'Pussy', 'bastardized', 'Damn-It', 'Prick', 'whore',
      'fuck sake', 'bastardise', 'bitchy', 'bullshitters', 'Twats', 'f**ed', "For Satan's Sake",
      'Damnits', 'bitchery', 'pissed', "motherfucker's",
      'bastardizations', 'God Damn', 'bullshit', 'shithole', 'Niggas', 'motherfucking', 'Shitty',
      'Sweet Jesus', 'bitched', 'pussy', 'f*cking God', 'f**',
      'god damn', 'goddamn', 't**at', 'Nigger', 'bitchiness', 'tit', 'pussies', 'Dammit', 'butt',
      'shit heads', 'dick', 'ass hole', 'damns', 'Hail Satan',
      'Craps', 'goddammit', 'boob', 'Boobs', 'God damnit', 'god dammit', 'shitter', 'pisses',
      'screw', 'bullshitted', 't**t', 'Screws', 'Cu*t',
      'Damnit', 'fuckhead', 'Motherfuckin', 'fucking God', 'shittings', 'screws', 'Crap', 'fucker',
      'F-Word', 'damning', 'Shit', 'bastards', 'bullshits',
      'Mother of God', 'Screw', 'godamned', 'Dickhead', 'Motherfucker', 'Arse-hole', 'd**k', 'suck']
    profanity_words = [u.lower() for u in profanity_words]
    audio_path = convertvideo2audio(input_video)
    device = "cuda"
    audio_file = audio_path
    batch_size = 16  # reduce if low on GPU mem

    audio = whisperx.load_audio(audio_file)
    result = whisper_model.transcribe(audio, batch_size=batch_size)

    # 2. Align whisper output
    model_a, metadata = whisperx.load_align_model(language_code=result["language"], device=device)
    result = whisperx.align(result["segments"], model_a, metadata, audio, device, return_char_alignments=False)

    # print(result["segments"]) # after alignment
    data = result["segments"]
    profane_words = {}
    rr = 1
    for i in data:
        words = i['words']
        for qq, ii in enumerate(words):
            for we in profanity_words:
                per = SequenceMatcher(None, we, ii['word'].lower()).ratio()
                if per >= 0.8:
                    profane_words[rr] = [ii['start'], ii['end']]
                    rr += 1
                    break
    return profane_words

def process_file(input_file, beep_sound_path):
    print(input_file)
    file_type = check_file_type(input_file)
    print(file_type)
    tm = input_file.split("/")
    try:
        name_of_video = tm[len(tm)].split(".")[0]
    except:
        name_of_video = "output_video"
    profane_words = get_profanity(input_file)
    print(profane_words)
    output_path = addBeep(input_file, beep_sound_path, profane_words, name_of_video, file_type)
    print(output_path)

input_file = "/content/gdrive/My Drive/profanity/profanity1.mp4"
beep_sound_path = "/content/gdrive/My Drive/profanity/bleep.mp3"

process_file(input_file, beep_sound_path)

from IPython.display import display, Video
video_path = 'output_video.mp4'

# Display the video in Colab
video = Video(video_path, embed=True)
display(video)

from IPython.display import Audio

# Origional Audio
audio_path = 'output.wav'

# Play the audio in Colab
audio = Audio(audio_path)
audio

from IPython.display import Audio

# Processed Audio
audio_path = 'output_video.wav'

# Play the audio in Colab
audio = Audio(audio_path)
audio